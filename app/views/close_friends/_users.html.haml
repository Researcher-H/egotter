= render partial: 'shared/sort_and_filter'

.empty-placeholders-wrapper{style: 'display: none;'}
  = render partial: 'timelines/empty_placeholder', locals: {menu_name: '', menu_or_users: 'users'}

.placeholders-wrapper
  - 3.times do
    = render partial: 'timelines/placeholder', locals: {menu_name: '', menu_or_users: 'users'}

.users-wrapper
  .main-content.twitter.users.row
.vertical-spacing

.row.text-center
  .col-xs-6
    = link_to t('dictionary.see_more'), '#', data: {max_sequence: 0, limit: 3}, style: 'display: none;', class: 'see-more-btn btn btn-default btn-lg'
  .col-xs-6
    = link_to t('dictionary.see_at_once_more'), send("all_#{controller_name}_path", twitter_user), style: 'display: none;', class: 'see-at-once-btn btn btn-info btn-lg'
.vertical-spacing

:javascript
  var FetchTask = function (url, uid, options) {
    if (this === undefined) {
      throw new TypeError();
    }

    this._url = url;
    this._uid = uid;
    this._maxSequence = 0;
    this._limit = 3;
    this._sortOrder = options['sortOrder'];
    this._filter = options['filter'];

    this._$placeholders = $('.placeholders-wrapper');
    this._$emptyPlaceholders = $('.empty-placeholders-wrapper');
    this._$usersContainer = $('.main-content.twitter.users');

    this.fetch();
  };

  FetchTask.prototype = {
    constructor: FetchTask,
    reset: function (options) {
      this._maxSequence = 0;
      this._limit = 3;
      if (options['sortOrder']) {
        this._sortOrder = options['sortOrder'];
      }
      if (options['filter']) {
        this._filter = options['filter'];
      }
      this._$placeholders.show();
      this._$usersContainer.empty();
      this.fetch();
    },
    fetch: function () {
      var params = {
        uid: this._uid,
        html: 1,
        limit: this._limit,
        max_sequence: this._maxSequence,
        sort_order: this._sortOrder,
        filter: this._filter
      };

      console.log('params', params);

      var self = this;

      Twitter.cache().fetch(this._url, params, function (res) {
        if (res.max_sequence && res.max_sequence >= 0) {
          self._maxSequence = res.max_sequence + 1;
          self._limit = 10;
        } else {
          // $seeMoreBtn.remove();
          // $seeAtOnceBtn.remove();
        }

        self._$placeholders.hide();
        var $users = $(res.users).hide().fadeIn(1000);
        self._$usersContainer.append($users);

        if (self._$usersContainer.find('.media').length <= 0) {
          self._$emptyPlaceholders.show();
        } else {
          self._$emptyPlaceholders.hide();
        }
      });
    }
  };

  $(function () {
    var signedIn = #{user_signed_in?};

    if (signedIn) {
      var url = '#{api_path}';
      var uid = '#{twitter_user.uid}';
      var sortOrder = $('.sort-order-dropdown').data('sort-order');
      var filter = $('.filter-dropdown').data('filter');
      var task = new FetchTask(url, uid, {sortOrder: sortOrder, filter: filter});

      $('.see-more-btn').on('click', function (e) {
        e.stopPropagation();
        task.fetch();
        return false;
      }).show();

      $('.see-at-once-btn').show();

      Twitter.enableSortButton($('.sort-order-buttons'), function (options) {task.reset(options)});
      Twitter.enableFilterButton($('.filter-buttons'), function (options) {task.reset(options)});

    } else {
      var signInFromSortUrl = '#{sign_in_path(via: build_via('sort_btn'))}';
      var signInFromFilterUrl = '#{sign_in_path(via: build_via('filter_btn'))}';
      $('.sort-orders').attr('href', signInFromSortUrl);
      $('.filters').attr('href', signInFromFilterUrl);
    }

    Twitter.enableFollowButton('.twitter.users');
    Twitter.enableUnfollowButton('.twitter.users');
  });

