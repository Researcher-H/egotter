<html>
<head>
  <title>debug</title>
  <%= javascript_include_tag 'application' %>
  <script src="/highcharts/highcharts.js"></script>

  <script>
    var config = {
      credits: {
        enabled: false
      },
      title: {
        text: 'title'
      },
      xAxis: {
        type: 'datetime',
        dateTimeLabelFormats: {
          millisecond: '%H:%M:%S.%L',
          second: '%H:%M:%S',
          minute: '%H:%M',
          hour: '%H:%M',
          day: '%e. %b',
          week: '%e. %b',
          month: '%b \'%y',
          year: '%Y'
        }
      },
      yAxis: {
        title: {
          text: 'yAxis'
        }
      },
      tooltip: {
        valueSuffix: ''
      },
      legend: {
        layout: 'vertical',
        align: 'right',
        verticalAlign: 'middle',
        borderWidth: 0
      },
      series: null
    };

    function draw_dau(){
      var conf = $.extend(true, {}, config);
      conf.title.text = 'DAU';
      conf.series = <%= raw @dau.to_json %>;
      $('.container.dau').highcharts(conf);
    }

    function draw_search_num(){
      var conf = $.extend(true, {}, config);
      conf.title.text = 'Search num';
      conf.series = <%= raw @search_num.to_json %>;
      $('.container.search_num').highcharts(conf);
    }

    $(function () {
      draw_dau();
      draw_search_num();
    });
  </script>
</head>
<body>
<div><a href="/">egotter</a></div>
<br>

<div>updated_at: <%= @debug_info[:current] %></div>
<br>

<div class="container dau" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<br>

<div class="container search_num" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<br>

<table border="1">
  <caption>Total Records</caption>
  <tr>
    <th>name</th>
    <th>total</th>
    <th>(last 1hour)</th>
    <th>uniq</th>
    <th>(last 1hour)</th>
  </tr>
  <% start = Time.zone.now %>
  <%# [User, Notification, TwitterUser, Friend, Follower, Status, Mention, SearchResult, Favorite].each do |model| %>
  <% [User, Notification, TwitterUser].each do |model| %>
    <tr>
      <td><%= model.model_name %></td>
      <td><%= model.all.size %></td>
      <td><%= model.where(created_at: @last_1hour).size %></td>
      <td><%= model.count('DISTINCT uid') rescue -1 %></td>
      <td><%= model.where(created_at: @last_1hour).count('DISTINCT uid') rescue -1 %></td>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Queueing</caption>
  <% start = Time.zone.now %>
  <% @debug_info.each do |k, v| %>
    <tr>
      <td><%= k %></td>
      <td><%= v %></td>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Bot</caption>
  <% start = Time.zone.now %>
  <tr>
    <td>size</td>
    <td><%= Bot.size %></td>
  </tr>
  <% Bot.verify_all_credentials.each do |cre| %>
    <tr>
      <td><%= cre[:screen_name] %></td>
      <td><%= !cre[:credential].nil? %></td>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Daily New User</caption>
  <% start = Time.zone.now %>
  <%
    day = Time.zone.now.in_time_zone('Tokyo').to_date
    default = (7.times.map {|n| day - n.day }).map{|n| [n.to_s, 0] }.to_h
    new_users = User.where(created_at: @last_1week).
        group_by { |x| x.created_at.in_time_zone('Tokyo').to_date.to_s }.map { |k, v| [k, v.count] }.to_h.reverse_merge(default)
  %>
  <tr style="text-align: right;">
    <% default.keys.each do |hour| %>
      <th><%= hour %></th>
    <% end %>
  </tr>
  <tr style="text-align: right;">
    <% new_users.each do |_hour, count| %>
      <td><%= count %></td>
    <% end %>
  </tr>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Daily Search Num</caption>
  <% start = Time.zone.now %>
  <%
    day = Time.zone.now.in_time_zone('Tokyo').to_date
    default = (7.times.map {|n| day - n.day }).map{|n| [n.to_s, 0] }.to_h
    logs_all = BackgroundSearchLog.where(created_at: @last_1week).
        group_by { |x| x.created_at.in_time_zone('Tokyo').to_date.to_s }.map { |k, v| [k, v.count] }.to_h.reverse_merge(default)
    logs_with_login = BackgroundSearchLog.where(created_at: @last_1week).where.not(user_id: -1).
        group_by { |x| x.created_at.in_time_zone('Tokyo').to_date.to_s }.map { |k, v| [k, v.count] }.to_h.reverse_merge(default)
    logs_without_login = BackgroundSearchLog.where(created_at: @last_1week).where(user_id: -1).
        group_by { |x| x.created_at.in_time_zone('Tokyo').to_date.to_s }.map { |k, v| [k, v.count] }.to_h.reverse_merge(default)
  %>
  <tr style="text-align: right;">
    <th></th>
    <% default.keys.each do |hour| %>
      <th><%= hour %></th>
    <% end %>
  </tr>
  <% names = ['all', 'with login', 'without login'] %>
  <% [logs_all, logs_with_login, logs_without_login].each.with_index do |logs, i| %>
    <tr style="text-align: right;">
      <td><%= names[i] %></td>
      <% logs.each do |_hour, count| %>
        <td><%= count %></td>
      <% end %>
    </tr>
  <% end %>
  <tr style="text-align: right;">
    <td>login rate</td>
    <% logs_all.each do |(hour, count)| %>
      <td><%= number_with_precision(logs_with_login[hour].to_f / count, precision: 2) %></td>
    <% end %>
  </tr>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Hourly Search Num</caption>
  <% start = Time.zone.now %>
  <%
    # default = (0..23).map { |n| [n, 0]}.to_h
    hour = Time.zone.now.in_time_zone('Tokyo').hour
    default = ((hour..23).to_a + (0..hour).to_a).uniq.map { |n| [n, 0]}.to_h
    logs_all = BackgroundSearchLog.where(created_at: @last_1day).
        group_by { |x| x.created_at.in_time_zone('Tokyo').hour }.map { |k, v| [k, v.count] }.to_h.reverse_merge(default)
    logs_with_login = BackgroundSearchLog.where(created_at: @last_1day).where.not(user_id: -1).
        group_by { |x| x.created_at.in_time_zone('Tokyo').hour }.map { |k, v| [k, v.count] }.to_h.reverse_merge(default)
    logs_without_login = BackgroundSearchLog.where(created_at: @last_1day).where(user_id: -1).
        group_by { |x| x.created_at.in_time_zone('Tokyo').hour }.map { |k, v| [k, v.count] }.to_h.reverse_merge(default)
  %>
  <tr style="text-align: right;">
    <th></th>
    <% default.keys.each do |hour| %>
      <th><%= hour %></th>
    <% end %>
  </tr>
  <% names = ['all', 'with login', 'without login'] %>
  <% [logs_all, logs_with_login, logs_without_login].each.with_index do |logs, i| %>
    <tr style="text-align: right;">
      <td><%= names[i] %></td>
      <% logs.each do |_hour, count| %>
        <td><%= count %></td>
      <% end %>
    </tr>
  <% end %>
  <tr style="text-align: right;">
    <td>login rate</td>
    <% logs_all.each do |(hour, count)| %>
      <td><%= number_with_precision(logs_with_login[hour].to_f / count, precision: 2) %></td>
    <% end %>
  </tr>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Worker</caption>
  <tr>
    <th>name</th>
    <th>total</th>
    <th>(last 1hour)</th>
    <th>success</th>
    <th>(last 1hour)</th>
    <th>failure</th>
    <th>(last 1hour)</th>
    <th>success rate</th>
    <th>(last 1hour)</th>
  </tr>
  <% start = Time.zone.now %>
  <% [BackgroundSearchLog, BackgroundUpdateLog, BackgroundNotificationLog].each do |model| %>
    <tr>
      <td><%= model.model_name %></td>
      <td><%= model.all.size %></td>
      <td><%= model.where(created_at: @last_1hour).size %></td>
      <td><%= model.where(status: true).size %></td>
      <td><%= model.where(status: true, created_at: @last_1hour).size %></td>
      <td><%= model.where(status: false).size %></td>
      <td><%= model.where(status: false, created_at: @last_1hour).size %></td>
      <td><%= rate = (model.where(status: true).size.to_f / model.all.size rescue 0.0); number_with_precision(rate, precision: 2) %></td>
      <td><%= rate = (model.where(status: true, created_at: @last_1hour).size.to_f / model.where(created_at: @last_1hour).size rescue 0.0); number_with_precision(rate, precision: 2) %></td>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<% start = Time.zone.now %>
<% [BackgroundSearchLog, BackgroundUpdateLog].each do |model| %>
  <table border="1">
    <caption><%= model.model_name %> Failed Reasons</caption>
    <tr>
      <th>id</th>
      <th>user_id</th>
      <th>screen_name</th>
      <th>reason</th>
      <th>message</th>
      <th>call_count</th>
      <th>created_at</th>
    </tr>
    <% model.where(status: false).order(created_at: :desc).limit(30).each do |log| %>
      <tr>
        <td><%= log.id %></td>
        <td><%= log.user_id rescue -1 %></td>
        <td><%= log.screen_name %></td>
        <td><%= log.reason %></td>
        <td><%= log.message %></td>
        <td><%= log.call_count %></td>
        <td><%= l(log.created_at.in_time_zone('Tokyo'), format: :short) %></td>
      </tr>
    <% end %>
  </table>
  <div><%= Time.zone.now - start %>s</div>
  <br>
<% end %>

<% start = Time.zone.now %>
<% [BackgroundNotificationLog].each do |model| %>
  <table border="1">
    <caption><%= model.model_name %> Failed Reasons</caption>
    <tr>
      <th>id</th>
      <th>user_id</th>
      <th>screen_name</th>
      <th>reason</th>
      <th>message</th>
      <th>kind</th>
      <th>delivered_by</th>
      <th>created_at</th>
    </tr>
    <% model.where(status: false).order(created_at: :desc).limit(30).each do |log| %>
      <tr>
        <td><%= log.id %></td>
        <td><%= log.user_id rescue -1 %></td>
        <td><%= log.screen_name %></td>
        <td><%= log.reason %></td>
        <td><%= log.message %></td>
        <td><%= log.kind %></td>
        <td><%= log.delivered_by %></td>
        <td><%= l(log.created_at.in_time_zone('Tokyo'), format: :short) %></td>
      </tr>
    <% end %>
  </table>
  <div><%= Time.zone.now - start %>s</div>
  <br>
<% end %>

<% start = Time.zone.now %>
<%
  sql = <<-'EOS'.strip_heredoc
  SELECT
          table_name,
          engine,
          table_rows                                        AS tbl_rows,
          avg_row_length                                    AS rlen,
          floor((data_length + index_length) / 1024 / 1024) AS allMB,
          floor((data_length) / 1024 / 1024)                AS dMB,
          floor((index_length) / 1024 / 1024)               AS iMB
        FROM information_schema.tables
        WHERE table_schema = database()
        ORDER BY (data_length + index_length) DESC;
  EOS
  result = ActiveRecord::Base.connection.select_all(sql)
%>

<table border="1">
  <caption>Database Table Size</caption>
  <tr>
    <th>table_name</th>
    <th>engine</th>
    <th>tbl_rows</th>
    <th>avg_rlen(B)</th>
    <th>total(MB)</th>
    <th>data(MB)</th>
    <th>index(MB)</th>
  </tr>
  <% result.rows.each do |columns| %>
    <tr>
      <% columns.each do |col| %>
        <td><%= col %></td>
      <% end %>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<div><a href="/">egotter</a></div>

</body>
</html>
