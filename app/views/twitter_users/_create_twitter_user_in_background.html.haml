= alert_info_box('update-box') do
  = t('twitter_users.in_background.updating', user: twitter_user.mention_name)
  = image_tag '/ajax-loader-blue.gif?a=1'

- button_classes = 'btn btn-default btn-sm'

= alert_info_box('update-this-page-box') do |id, via|
  %span.next-creation-note= ''
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('request-to-update-box') do |id, via|
  %span.next-creation-note= ''
  = link_to(t('twitter_users.in_background.request_to_update'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_warning_box('failed-box') do |id, via|
  %span= t('twitter_users.in_background.failed', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('refresh-box') do |id, via|
  %span.message= t('twitter_users.show.update_is_coming', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('too-many-friends-box') do |id, via|
  = t('twitter_users.in_background.too_many_friends', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('follow-box') do |id, via|
  = t('twitter_users.in_background.automated_update_stopped', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.do_follow'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via), follow: true), class: button_classes)

= alert_warning_box('invalid-token-box') do |id, via|
  = t('twitter_users.in_background.invalid_token', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('accurate-counting-box') do |id, via|
  = t('twitter_users.in_background.accurate_counting')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('via-dm-box') do |id, via|
  = t('twitter_users.in_background.via_dm')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_info_box('sign-in-box') do |id, via|
  = t('twitter_users.in_background.lets_sign_in')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_info_box('too-many-searches-box') do |id, via|
  - sign_in_url = sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via))
  - pricing_url = pricing_path(via: via)
  - support_url = pricing_path(via: via, anchor: 'enterprise-plan')
  = search_count_limitation_too_many_searches_message(sign_in_url, pricing_url, support_url)

:javascript
  (function () {
    var $updateBox, $updateThisPageBox, $requestToUpdateBox, $failedBox, $refreshBox, $tooManyFriendsBox, $followBox, $invalidTokenBox, $accurateCountingBox, $viaDMBox, $signInBox, $tooManySearchesBox;

    var signedIn = #{user_signed_in?};
    var crawler = #{from_crawler?};
    var authorized = #{user_signed_in? && current_user.authorized?};
    var removedPage = #{%w(unfriends unfollowers blocking_or_blocked).include?(controller_name)};
    var viaDM = #{via_dm?};
    var profileNotFound = #{twitter_user.profile_not_found?};
    var tooShortCreateInterval = #{twitter_user.too_short_create_interval?};
    var nextCreationTimeMessage = '#{next_creation_message(twitter_user)}';
    var requestToUpdate = #{switch_to_request?(twitter_user)};

    var twitterUser = {
      uid: '#{twitter_user.uid}',
      createdAt: #{twitter_user.created_at.to_i}
    };

    var logger = {
      warn: function () {
        var args = Array.from(arguments);
        var text = args.join(' ');
        $('#global-sneak-error-message').text(text);
      }
    };

    function checkLatestTwitterUser (url) {
      Timelines.checkLatestTwitterUser(url, {interval: 3000, max_retry_count: 5},
        function done (res) {
          console.log('checkLatestTwitterUser', res);

          if (res.created_at > twitterUser.createdAt) {
            var url = '#{twitter_users_changes_path(uid: twitter_user.uid)}';
            $.get(url).done(function (res) {
              $updateBox.alert('close');
              if (res.text) {
                $refreshBox.find('.message').text(res.text);
              }
              $refreshBox.show().sticky();
            }).fail(function (xhr) {
              console.warn(url, xhr.responseText);
              $updateBox.alert('close');
              $refreshBox.show().sticky();
            });

            return true;
          } else {
            return false;
          }
        }, function stopped (res, reason) {
          console.warn('checkLatestTwitterUser', reason, res);
          logger.warn(reason);

          ga('send', {
            hitType: 'event',
            eventCategory: 'TwitterUsers',
            eventAction: 'exhausted',
            eventLabel: 'Retry exhausted'
          });

          $updateBox.alert('close');
          $updateThisPageBox.show().sticky();

        }, function failed (xhr) {
          console.log('checkLatestTwitterUser failed.', xhr.responseText);
          logger.warn(xhr.responseText);

          ga('send', {
            hitType: 'event',
            eventCategory: 'TwitterUsers',
            eventAction: 'failed',
            eventLabel: 'Polling failed'
          });

          $updateBox.alert('close');
          $failedBox.show().sticky();
        });
    }

    function requestToCreateTwitterUser(url, params) {
      TwitterUsers.requestToCreateTwitterUser(url, params, function (res) {
        console.log('requestToCreateTwitterUser', res);

        if (res.jid) {
          $updateBox.show().sticky();
          var url = '#{twitter_user_path(uid: twitter_user.uid, via: build_via('update_box'))}';
          checkLatestTwitterUser(url);
        } else {
          console.warn("Don't start polling since a job is not started.");
          logger.warn("Don't start polling since a job is not started.");

          ga('send', {
            hitType: 'event',
            eventCategory: 'UpdateJobs',
            eventAction: 'not started',
            eventLabel: 'Done'
          });

          $updateBox.show().sticky();
          setTimeout(function () {
            $updateBox.alert('close');
            $updateThisPageBox.show().sticky();
          }, 3000);
        }
      }, function (xhr) {
        console.warn('requestToCreateTwitterUser failed.', xhr.responseText);
        logger.warn(xhr.responseText);

        ga('send', {
          hitType: 'event',
          eventCategory: 'UpdateJobs',
          eventAction: 'failed',
          eventLabel: 'Done'
        });

        if (xhr.status === 400 && xhr.responseText && JSON.parse(xhr.responseText)['error'] === 'too_many_searches') {
          $tooManySearchesBox.show().sticky();
        }
      });
    }

    $(function () {
      if (profileNotFound) {
        return;
      }

      $updateBox = $('#update-box');
      $updateThisPageBox = $('#update-this-page-box');
      $requestToUpdateBox = $('#request-to-update-box');
      $failedBox = $('#failed-box');
      $refreshBox = $('#refresh-box');
      $tooManyFriendsBox = $('#too-many-friends-box');
      $followBox = $('#follow-box');
      $invalidTokenBox = $('#invalid-token-box');
      $accurateCountingBox = $('#accurate-counting-box');
      $viaDMBox = $('#via-dm-box');
      $signInBox = $('#sign-in-box');
      $tooManySearchesBox = $('#too-many-searches-box');

      if (requestToUpdate) {
        console.log('Switch to request');
        $updateThisPageBox = $requestToUpdateBox;
      }
      console.log(nextCreationTimeMessage);
      $updateThisPageBox.find('.next-creation-note').html(nextCreationTimeMessage);

      $('.sticky-box').each(function (i, box) {
        var $box = $(box);

        $box.on('close.bs.alert', function () {
          $box.parent('.sticky-wrapper').hide();
        });

        $box.find('a').on('click', function (e) {
          ga('send', {
            hitType: 'event',
            eventCategory: $box.data('name'),
            eventAction: 'click',
            eventLabel: e.target.href,
            transport: 'beacon'
          });
        });
      });

      if (signedIn) {
        if (!authorized) {
          $invalidTokenBox.show().sticky();
          return;
        }

        var url = '#{follow_path(via: build_via('follow_box'))}';
        TwitterUsers.isFollowingEgotter(url, function (res) {
          if (res.follow) {
            var url = "#{twitter_users_path(via: build_via('background_update'))}";

            if (tooShortCreateInterval) {
              console.warn("Don't start polling since the create interval is too short.");
              logger.warn("Don't start polling since the create interval is too short.");

              $updateBox.show().sticky();
              setTimeout(function () {
                $updateBox.alert('close');
                $updateThisPageBox.show().sticky();
              }, 3000);
            } else {
              var params = {uid: twitterUser.uid};
              requestToCreateTwitterUser(url, params);
            }
          } else {
            $followBox.show().sticky();
          }
        });
      } else {
        if (removedPage) {
          $accurateCountingBox.show().sticky();
        } else if (viaDM) {
          $viaDMBox.show().sticky();
        } else if (!crawler) {
          $signInBox.show().sticky();
        } else {
          // Maybe crawler
        }
      }

      (function (){
        if (signedIn && authorized) {
          var url = "#{account_status_path(uid: twitter_user.uid)}";
          TwitterUsers.confirmAccountStatus(url, function done (res) {
            console.log('accountStatus', res);
          }, function failed (xhr) {
            console.log(url, xhr.responseText);
          });
        }
      })();

      if (!crawler) {
        Detectors.secretMode(function () {
          var message = '#{t('before_sign_in.secret_mode_detected_with_count', seconds: 3)}';
          Logger.warn(message);
          setTimeout(function() {
            window.location.href = "#{root_path(via: build_via('secret_mode_detected'))}";
          }, 3000);
        });

        Detectors.adBlocker(function () {
          var message = '#{t('before_sign_in.ad_blocker_detected_with_count', seconds: 3)}';
          Logger.warn(message);
          setTimeout(function() {
            window.location.href = "#{root_path(via: build_via('ad_blocker_detected'))}";
          }, 3000);
        });
      }
    });
  })();
