= alert_info_box('update-box') do
  = t('twitter_users.in_background.updating', user: twitter_user.mention_name)
  = image_tag '/ajax-loader-blue.gif?a=1'

- button_classes = 'btn btn-default btn-sm'

= alert_info_box('update-this-page-box') do |id, via|
  %span.next-creation-note= ''
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('request-to-update-box') do |id, via|
  %span.next-creation-note= ''
  = link_to(t('twitter_users.in_background.request_to_update'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_warning_box('failed-box') do |id, via|
  %span= t('twitter_users.in_background.failed', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('refresh-box') do |id, via|
  %span.message= t('twitter_users.show.update_is_coming', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('too-many-friends-box') do |id, via|
  = t('twitter_users.in_background.too_many_friends', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('follow-box') do |id, via|
  = t('twitter_users.in_background.automated_update_stopped', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.do_follow'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via), follow: true), class: button_classes)

= alert_warning_box('invalid-token-box') do |id, via|
  = t('twitter_users.in_background.invalid_token', user: twitter_user.mention_name)
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('accurate-counting-box') do |id, via|
  = t('twitter_users.in_background.accurate_counting')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('via-dm-box') do |id, via|
  = t('twitter_users.in_background.via_dm')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_info_box('sign-in-box') do |id, via|
  = t('twitter_users.in_background.lets_sign_in')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_info_box('too-many-searches-box') do |id, via|
  - sign_in_url = sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via))
  - pricing_url = pricing_path(via: via)
  - support_url = pricing_path(via: via, anchor: 'enterprise-plan')
  = search_count_limitation_too_many_searches_message(sign_in_url, pricing_url, support_url)

:javascript
  (function () {
    var signedIn = #{user_signed_in?};
    var crawler = #{from_crawler?};
    var authorized = #{user_signed_in? && current_user.authorized?};
    var removedPage = #{%w(unfriends unfollowers blocking_or_blocked).include?(controller_name)};
    var viaDM = #{via_dm?};
    var profileNotFound = #{twitter_user.profile_not_found?};
    var tooShortCreateInterval = #{twitter_user.too_short_create_interval?};
    var nextCreationTimeMessage = '#{next_creation_message(twitter_user)}';
    var requestToUpdate = #{switch_to_request?(twitter_user)};
    var eventCategory = '#{controller_name}##{action_name}';

    var alertBox;

    var urls = {
      twitter_users_changes: '#{twitter_users_changes_path(uid: twitter_user.uid)}',
      twitter_user: '#{twitter_user_path(uid: twitter_user.uid, via: build_via('update_box'))}',
      follow: '#{follow_path(via: build_via('follow_box'))}',
      twitter_users: "#{twitter_users_path(via: build_via('background_update'))}",
      account_status: "#{account_status_path(uid: twitter_user.uid)}"
    };

    var twitterUser = {
      userId: '#{current_user&.id}',
      uid: '#{twitter_user.uid}',
      screenName: "#{twitter_user.screen_name}",
      createdAt: #{twitter_user.created_at.to_i}
    };

    function poll (url) {
      Timelines.checkLatestTwitterUser(url, {interval: 3000, max_retry_count: 5},
        function done (res) {
          console.log('poll', res);

          if (res.created_at > twitterUser.createdAt) {
            var url = urls.twitter_users_changes;
            $.get(url).done(function (res) {
              if (res.text) {
                alertBox.find('refresh').find('.message').text(res.text);
              }
              alertBox.show('refresh');
            }).fail(function (xhr) {
              console.warn(url, xhr.responseText);
              alertBox.show('refresh');
            });

            return true;
          } else {
            return false;
          }
        }, function stopped (res, reason) {
          console.warn('poll', reason, res);
          TwitterUsers.sneakLogger.warn(reason);

          alertBox.show('updateThisPage');

        }, function failed (xhr) {
          console.log('poll failed.', xhr.responseText);
          TwitterUsers.sneakLogger.warn(xhr.responseText);

          alertBox.show('failed');

          var error = {error: 'Something'};
          try {
            error = JSON.parse(xhr.responseText);
          } catch (e) {
            console.error(e);
          }

          ga('send', {
            hitType: 'event',
            eventCategory: eventCategory,
            eventAction: 'poll failed',
            eventLabel: JSON.stringify($.extend({status: xhr.status, error: error['error']}, twitterUser))
          });
        });
    }

    function requestToCreateTwitterUser(url, params) {
      TwitterUsers.requestToCreateTwitterUser(url, params, function done (res) {
        console.log('requestToCreateTwitterUser', res);

        if (res.jid) {
          alertBox.show('update');
          var url = urls.twitter_user;
          poll(url);
        } else {
          console.warn("Don't start polling since a job is not started.");
          TwitterUsers.sneakLogger.warn("Don't start polling since a job is not started.");

          alertBox.show('update');
          setTimeout(function () {
            alertBox.show('updateThisPage');
          }, 3000);
        }
      }, function failed (xhr) {
        console.warn('requestToCreateTwitterUser failed.', xhr.responseText);
        TwitterUsers.sneakLogger.warn(xhr.responseText);

        var error = {error: 'Something'};
        try {
          error = JSON.parse(xhr.responseText);
        } catch (e) {
          console.error(e);
        }

        if (error['error'] === 'too_many_searches') {
          alertBox.show('tooManySearches');
        } else {
          alertBox.show('failed');
        }

        ga('send', {
          hitType: 'event',
          eventCategory: eventCategory,
          eventAction: 'requestToCreateTwitterUser failed',
          eventLabel: JSON.stringify($.extend({status: xhr.status, error: error['error']}, twitterUser))
        });
      });
    }

    $(function () {
      if (profileNotFound) {
        return;
      }

      alertBox = new TwitterUsers.AlertBox(requestToUpdate, nextCreationTimeMessage, twitterUser, eventCategory);

      if (signedIn) {
        if (!authorized) {
          alertBox.show('invalidToken');
          return;
        }

        var url = urls.follow;
        TwitterUsers.isFollowingEgotter(url, function (res) {
          if (res.follow) {
            var url = urls.twitter_users;

            if (tooShortCreateInterval) {
              console.warn("Don't start polling since the create interval is too short.");
              TwitterUsers.sneakLogger.warn("Don't start polling since the create interval is too short.");

              alertBox.show('update');
              setTimeout(function () {
                alertBox.show('updateThisPage');
              }, 3000);
            } else {
              var params = {uid: twitterUser.uid};
              requestToCreateTwitterUser(url, params);
            }
          } else {
            alertBox.show('follow');
          }
        });
      } else {
        if (removedPage) {
          alertBox.show('accurateCounting');
        } else if (viaDM) {
          alertBox.show('viaDM');
        } else if (!crawler) {
          alertBox.show('signIn');
        } else {
          // Maybe crawler
        }
      }

      (function (){
        if (signedIn && authorized) {
          var url = urls.account_status;
          TwitterUsers.confirmAccountStatus(url, function done (res) {
            console.log('accountStatus', res);
          }, function failed (xhr) {
            console.log(url, xhr.responseText);
          });
        }
      })();

      if (!crawler) {
        Detectors.secretMode(function detected () {
          var message = '#{t('before_sign_in.secret_mode_detected_with_count', seconds: 3)}';
          Logger.warn(message);
          setTimeout(function() {
            window.location.href = "#{root_path(via: build_via('secret_mode_detected'))}";
          }, 3000);

          ga('send', {
            hitType: 'event',
            eventCategory: eventCategory,
            eventAction: 'SecretMode detected',
            eventLabel: JSON.stringify(twitterUser)
          });
        });

        Detectors.adBlocker(function detected () {
          var message = '#{t('before_sign_in.ad_blocker_detected_with_count', seconds: 3)}';
          Logger.warn(message);
          setTimeout(function() {
            window.location.href = "#{root_path(via: build_via('ad_blocker_detected'))}";
          }, 3000);

          ga('send', {
            hitType: 'event',
            eventCategory: eventCategory,
            eventAction: 'AdBlocker detected',
            eventLabel: JSON.stringify(twitterUser)
          });
        });
      }
    });
  })();
