- content_for :canonical_url do
  %link{href: profile_url(screen_name: @screen_name), rel: 'canonical'}

- breadcrumb :profile, @screen_name

- if @prev_name || @next_name
  .d-flex.justify-content-between.mb-3
    %div= (@prev_name ? link_to(t('.prev', user: @prev_name), profile_path(@prev_name, {names: params[:names]}.merge(campaign_params('prev_name'))), class: 'btn btn-outline-primary btn-sm') : '')
    %div= (@next_name ? link_to(t('.next', user: @next_name), profile_path(@next_name, {names: params[:names]}.merge(campaign_params('next_name'))), class: 'btn btn-outline-primary btn-sm') : '')

.message-box.alert.alert-warning{style: 'display: none;'}
.forbidden-reason.my-1{style: 'display: none;'}= t('.forbidden_reason_html', user: @screen_name)
.not-found-reason.my-1{style: 'display: none;'}= t('.not_found_reason_html', user: @screen_name)

- title t('.page_title', user: @screen_name)
- set_meta_tags description: t('.meta_description', user: @screen_name)

.mt-3.mb-1
  = link_to user_url(@screen_name), class: 'btn btn-primary btn-block', target: '_blank' do
    %img.rounded{alt: "", height: "20", src: image_path('/logo_transparent_96x96.png')}
    = t('.see_on_twitter', user: @screen_name)

= render(partial: 'adsense/ad', locals: {vertical: :top})

.mb-3.mt-1
  = link_to timeline_path(screen_name: @screen_name, via: current_via('analyze_button')), class: 'btn btn-primary btn-block' do
    %img.rounded{alt: "", height: "20", src: image_path('/logo_transparent_96x96.png')}
    = t('.analyze', user: @screen_name)

- if @user
  = render partial: 'shared/profile_section', locals: {twitter_user: @user, expanded: true}

- if @indicator_names
  - @indicator_names.each do |name|
    - if name == @screen_name
      = link_to(t('.seeing', user: name), '#', class: 'btn btn-outline-primary btn-sm btn-block mb-3 disabled', disabled: true)
    - else
      = link_to(t('.see', user: name), profile_path(name, {names: params[:names]}.merge(campaign_params('indicator_names'))), class: 'btn btn-outline-primary btn-sm btn-block mb-3')

:javascript
  $(function() {
    var fromCrawler = #{from_crawler?};
    if (fromCrawler) {
      return;
    }

    var userSignedIn = #{user_signed_in?};
    if (!userSignedIn) {
      ToastMessage.info('#{t('.sign_in_html', user: @screen_name, url: sign_in_path(redirect_path: profile_path(@screen_name, names: params[:names], via: current_via('require_sign_in'))))}');
      return;
    }

    var url = '#{raw api_v1_account_statuses_path(screen_name: @screen_name)}';
    var retryCount = 0;

    function fetch() {
      $.get(url, {retry_count: retryCount}).done(function (res) {
        if (res['status'] === 'retry') {
          retryCount++;
          if (retryCount >= 3) {
            console.log('Retry exhausted', retryCount)
            ToastMessage.info('#{t('.retry_exhausted')}');
          } else {
            console.log('Retry', retryCount)
            setTimeout(fetch, 2000);
          }
        } else {
          if (res['status'] === 'ok') {
            console.log('ok', retryCount);
            ToastMessage.clear();
          } else {
            var message = res['message'];
            ToastMessage.warn(message);
            $('.message-box').text(message).show();
            $('.forbidden-reason').show();
            $('.not-found-reason').show();
          }
        }
      }).fail(function (xhr, textStatus, errorThrown) {
        var message;
        try {
          message = JSON.parse(xhr.responseText)['message'];
        } catch (e) {
          console.error(e);
        }
        if (!message) {
          message = xhr.status + ' (' + errorThrown + ')';
        }
        ToastMessage.warn(message);
      });
    }

    ToastMessage.info('#{t('.updating_html', user: @screen_name)}');
    fetch();
  });
