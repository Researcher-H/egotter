<%= render(partial: 'search_results/menu_items',
           locals: {searched_tw_user: @searched_tw_user,
                    menu_items: @menu_items,
                    menu_update_histories: @menu_update_histories,
                    menu_common_friends_and_followers: @menu_common_friends_and_followers,
                    close_friends: @menu_close_friends,
                    usage_stats: @menu_usage_stats,
                    clusters_belong_to: @menu_clusters_belong_to}) %>

<%= render(partial: 'searches/adsense_bottom') %>

<script>
<% if @job_id %>
  console.log('It needs to check for updates. <%= @job_id %>');

  $(function () {
    var created_at = <%= @searched_tw_user.created_at.to_i %>;
    var interval = 2000;
    var max_interval = 5000;
    var retry_count = 0;
    var max_retry_count = 5;
    var hash = null;
    var refresh_box = $('.alert.alert-info');
    var refresh_btn = refresh_box.find('a');

    refresh_btn.on('click', function (e) {
      refresh();
      e.preventDefault();
      e.stopPropagation();
      return false
    });

    function delete_cache(hash) {
      var url = "<%= raw page_cache_path(id: @searched_tw_user.uid, hash: 'HASH') %>";
      return $.ajax({url: url.replace(/HASH/, hash), type: 'DELETE'})
    }

    function create_cache() {
      var url = "<%= raw page_caches_path(id: @searched_tw_user.uid) %>";
      return $.post(url)
    }

    function failed(xhr) {
      console.log(xhr.responseText);
    }

    function refresh() {
      delete_cache(hash)
          .then(create_cache, failed)
          .done(window.location.reload)
          .fail(failed);
    }

    function tic() {
      var url = "<%= background_search_log_path(id: @searched_tw_user.uid) %>";
      $.get(url)
          .done(function (res, text_status, xhr) {
            console.log(res, text_status, xhr.status, interval, retry_count);

            if (xhr.status == 200) {
              if (created_at < res.created_at) {
                hash = res.hash;
                refresh_box.show();
              } else {
                console.log('the result is latest.')
              }
            } else if (retry_count >= max_retry_count) {
              console.log('stop waiting');
            } else {
              retry_count++;
              interval += 2000;
              if (interval > max_interval) interval = max_interval;
              setTimeout(tic, interval);
            }
          })
          .fail(failed);
    }

    tic();
  });
<% else %>
  console.log('It does not need to check for updates.');
<% end %>
</script>