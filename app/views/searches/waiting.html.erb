<%= render(partial: 'profiles/overview',
           locals: {user: @searched_tw_user, unique_id: @searched_tw_user.uid}) %>

<script>
  $(function () {
    enableSlickOnPageTop('<%= @searched_tw_user.uid %>');
  });
</script>

<div class="waiting">
  <div class="waiting-msg">
    <%= t('searches.waiting.searching', user: @searched_tw_user.name) %>&nbsp;<%= image_tag '/ajax-loader.gif' %>
  </div>

  <div class="finished-msg" style="display: none;">
    <%= t("searches.waiting.waiting_is_finished_msg") %>&nbsp;<%= image_tag '/ajax-loader.gif' %>
  </div>

  <div class="bar">
    <div class="progress">
      <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
        <span class="sr-only">0% Complete</span>
      </div>
    </div>
  </div>

  <div class="rescue-box" style="display: none;">
    <div class="error-msg"></div>

    <% if user_signed_in? %>
      <div class="retry-btn">
        <%= link_to t('searches.waiting.retry_search_by', user: @searched_tw_user.mention_name),
                    searches_path(screen_name: @searched_tw_user.screen_name, id: @searched_tw_user.uid, via: :retry),
                    class: 'btn btn-lg btn-info btn-block', method: :post %>
      </div>
    <% else %>
      <div class="login-btn">
        <%= link_to t('login.welcome.sign_in_with_twitter'), welcome_path, class: 'btn btn-lg btn-info btn-block' %>
      </div>
    <% end %>

    <div class="support-btn">
      <%= link_to t('dictionary.link_to_support'), support_path, class: 'btn btn-lg btn-info btn-block' %>
    </div>
  </div>

  <div style="margin-top: 15px;"></div>
</div>

<script>
  'use strict';
  $(function () {
    class ProgressBar {
      constructor() {
        this.$progressBar = $('.bar');
        this.$bar = this.$progressBar.find('.progress-bar');
      }

      set(value) {
        this.$bar.css('width', value + '%').attr('aria-valuenow', value);
        this.$bar.find('.sr-only').text(value + '% Complete');
      }

      advance() {
        let value = parseInt(this.$bar.attr('aria-valuenow'));
        value += (value > 50 ? this.random(5, 10) : this.random(10, 20));
        if (value > 90) value = 90;
        this.set(value);
      }

      hide() {
        this.$progressBar.hide();
      }

      random(min, max) {
        return Math.random() * (max - min) + min;
      }
    }

    class Exception {
      constructor(msg1, msg2) {
        this.msg1 = msg1;
        this.msg2 = msg2;
        this.isLogin = <%= user_signed_in? ? 'true' : 'false' %>;
      }

      showMessage() {
        $('.error-msg').html(this.isLogin ? this.msg1 : this.msg2);
        $('.rescue-box').show();
      }
    }

    const tooManyRequests = new Exception(
        '<%= t("after_sign_in.too_many_requests") %>',
        '<%= t("before_sign_in.too_many_requests", sign_in_link: link_to(t('dictionary.sign_in'), welcome_path)).html_safe %>'
    );

    const unauthorized = new Exception(
        '<%= t("after_sign_in.unauthorized", sign_out_link: link_to(t('dictionary.sign_out'), sign_out_path)).html_safe %>',
        '<%= t("before_sign_in.unauthorized", sign_in_link: link_to(t('dictionary.sign_in'), welcome_path)).html_safe %>'
    );

    const somethingIsWrong = new Exception(
        '<%= t("after_sign_in.something_is_wrong") %>',
        '<%= t("before_sign_in.something_is_wrong", sign_in_link: link_to(t('dictionary.sign_in'), welcome_path)).html_safe %>'
    );

    const timeout = new Exception(
        '<%= t("after_sign_in.retry_timeout", user: @searched_tw_user.name) %>',
        '<%= t("before_sign_in.retry_timeout", user: @searched_tw_user.screen_name, sign_in_link: link_to(t('dictionary.sign_in'), welcome_path)).html_safe %>'
    );

    const errors = {
      <%= BackgroundSearchLog::TooManyRequests::MESSAGE %>: tooManyRequests,
      <%= BackgroundSearchLog::Unauthorized::MESSAGE %>: unauthorized,
      <%= BackgroundSearchLog::SomethingError::MESSAGE %>: somethingIsWrong
    };

    class Interval {
      constructor() {
        this.value = 2000;
        this.max = 5000;
      }

      current() {
        return this.value;
      }

      next() {
        this.value += 2000;
        if (this.value > this.max) this.value = this.max;
        return this.value
      }
    }

    class Retry {
      constructor() {
        this.count = 0;
        this.max = 10;
      }

      current() {
        return this.count;
      }

      next() {
        this.count += 1;
        return this.count < this.max;
      }
    }

    const $waitingMessage = $('.waiting-msg');
    const progressBar = new ProgressBar();
    const interval = new Interval();
    const retry = new Retry();
    const scope = {action: "<%= action_name %>", uid: <%= @searched_tw_user.uid %>};

    function failed(xhr) {
      if (xhr.status === 502) {
        Rollbar.scope(scope).warning("Timeout while attempting fetching.");
        return;
      }
      console.log(xhr.responseText);

      const res = $.parseJSON(xhr.responseText || null);
      progressBar.hide();
      $waitingMessage.hide();

      if (res && errors[res.reason]) {
        errors[res.reason].showMessage();
      } else {
        somethingIsWrong.showMessage();
      }
    }

    function done(res, text_status, xhr) {
      console.log(res, text_status, xhr.status, interval.current(), retry.current());

      if (xhr.status === 200) {
        progressBar.set(95);
        $waitingMessage.hide();
        $('.finished-msg').show();
        window.location.replace("<%= search_path(screen_name: @searched_tw_user.screen_name) %>");
        return
      }

      if (!retry.next()) {
        progressBar.hide();
        $waitingMessage.hide();
        timeout.showMessage();
        Rollbar.scope(scope).warning("Retries exhausted while attempting fetching.");
        return
      }

      progressBar.advance();
      setTimeout(tic, interval.next());
    }

    function tic() {
      const url = "<%= background_search_log_path(id: @searched_tw_user.uid) %>";
      $.get(url).done(done).fail(failed);
    }

    tic();
  });
</script>
