<div><a href="/">egotter</a></div>
<br>

<table border="1">
  <caption>Total Records</caption>
  <tr>
    <th>name</th>
    <th>total</th>
    <th>(last 1hour)</th>
    <th>uniq</th>
    <th>(last 1hour)</th>
  </tr>
  <% start = Time.zone.now %>
  <% [User, TwitterUser, Friend, Follower, Status, Mention, SearchResult, Favorite].each do |model| %>
    <tr>
      <td><%= model.model_name %></td>
      <td><%= model.all.size %></td>
      <td><%= model.where(created_at: @last_1hour).size %></td>
      <td><%= model.count('DISTINCT uid') %></td>
      <td><%= model.where(created_at: @last_1hour).count('DISTINCT uid') %></td>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Queueing</caption>
  <% start = Time.zone.now %>
  <% @debug_info.each do |k, v| %>
    <tr>
      <td><%= k %></td>
      <td><%= v %></td>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<table border="1">
  <caption>Worker</caption>
  <tr>
    <th>name</th>
    <th>total</th>
    <th>(last 1hour)</th>
    <th>success</th>
    <th>(last 1hour)</th>
    <th>failure</th>
    <th>(last 1hour)</th>
    <th>success rate</th>
    <th>(last 1hour)</th>
  </tr>
  <% start = Time.zone.now %>
  <% [BackgroundSearchLog, BackgroundUpdateLog].each do |model| %>
    <tr>
      <td><%= model.model_name %></td>
      <td><%= model.all.size %></td>
      <td><%= model.where(created_at: @last_1hour).size %></td>
      <td><%= model.where(status: true).size %></td>
      <td><%= model.where(status: true, created_at: @last_1hour).size %></td>
      <td><%= model.where(status: false).size %></td>
      <td><%= model.where(status: false, created_at: @last_1hour).size %></td>
      <td><%= model.where(status: true).size.to_f / model.all.size rescue 0.0 %></td>
      <td><%= model.where(status: true, created_at: @last_1hour).size.to_f / model.where(created_at: @last_1hour).size rescue 0.0 %></td>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<% start = Time.zone.now %>
<% [BackgroundSearchLog, BackgroundUpdateLog].each do |model| %>
  <table border="1">
    <caption>Worker Reasons(<%= model.model_name %>)</caption>
    <tr>
      <th>id</th>
      <th>screen_name</th>
      <th>reason</th>
      <th>message</th>
      <th>call_count</th>
      <th>created_at</th>
    </tr>
    <% model.where(status: false).order(created_at: :desc).limit(50).each do |log| %>
      <tr>
        <td><%= log.id %></td>
        <td><%= log.screen_name %></td>
        <td><%= log.reason %></td>
        <td><%= log.message %></td>
        <td><%= log.call_count %></td>
        <td><%= l(log.created_at + 9.hours, format: :short) %></td>
      </tr>
    <% end %>
  </table>
  <div><%= Time.zone.now - start %>s</div>
  <br>
<% end %>

<% start = Time.zone.now %>
<%
  sql = <<-'EOS'.strip_heredoc
    SELECT
      table_name,
      engine,
      table_rows                                        AS tbl_rows,
      avg_row_length                                    AS rlen,
      floor((data_length + index_length) / 1024 / 1024) AS allMB,
      floor((data_length) / 1024 / 1024)                AS dMB,
      floor((index_length) / 1024 / 1024)               AS iMB
    FROM information_schema.tables
    WHERE table_schema = database()
    ORDER BY (data_length + index_length) DESC;
  EOS
 result = ActiveRecord::Base.connection.select_all(sql)
%>

<table border="1">
  <caption>Database Table Size</caption>
  <tr>
    <th>table_name</th>
    <th>engine</th>
    <th>tbl_rows</th>
    <th>avg_rlen(B)</th>
    <th>total(MB)</th>
    <th>data(MB)</th>
    <th>index(MB)</th>
  </tr>
  <% result.rows.each do |columns| %>
    <tr>
      <% columns.each do |col| %>
        <td><%= col %></td>
      <% end %>
    </tr>
  <% end %>
</table>
<div><%= Time.zone.now - start %>s</div>
<br>

<div><a href="/">egotter</a></div>
