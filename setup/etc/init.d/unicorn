#!/bin/sh

# /etc/init.d/unicorn

if [ -f /etc/init.d/functions ]; then
  . /etc/init.d/functions
fi

if echo ' \c' | grep 'c' > /dev/null 2>&1; then
  en='-n'
  ec=''
else
  en=''
  ec='\c'
fi

APP_ROOT="/home/ec2-user/egotter/"
USER="ec2-user"
RAILS_ENV="production"
NAME=unicorn
PID_FILE="${APP_ROOT}tmp/pids/${NAME}.pid"
OLD_PID_FILE="${APP_ROOT}tmp/pids/${NAME}.pid.oldbin"
CONFIG_FILE="${APP_ROOT}config/${NAME}.rb"

print_pid() {
  cat ${PID_FILE}
}

print_old_pid() {
  cat ${OLD_PID_FILE}
}

print_command() {
  ps -o command= -p $(print_pid)
}

start() {
  cd $APP_ROOT
  sudo -u ${USER} -H bash -l -c "cd $APP_ROOT && /usr/local/bin/bundle exec unicorn_rails -c ${CONFIG_FILE} -E ${RAILS_ENV} -D"
  echo ${en} "Starting $NAME: ${ec}"
  success
  echo
}

stop() {
  sudo kill -QUIT $(print_pid)
  echo ${en} "Stopping $NAME: ${ec}"
  success
  echo
}

restart() {
  sudo kill -USR2 $(print_pid) # reexecute the running binary
  while [ ! -f ${PID_FILE} -o ! -f ${OLD_PID_FILE} ]; do
    sleep 2
  done

  until [ $(pgrep -P $(print_pid) | wc -l | awk '{print $1}') -gt 2 ]; do
    sleep 2
  done

  sudo kill -WINCH $(print_old_pid) # gracefully stops workers but keep the master running
  while [ $(pgrep -P $(print_old_pid) | wc -l | awk '{print $1}') -gt 1 ]; do
    sudo kill -TTOU $(print_old_pid) # decrement the number of worker processes by one
    sleep 2
  done

  sudo kill -QUIT $(print_old_pid) # graceful shutdown, waits for workers to finish their current request before finishing

  echo ${en} "Restarting $NAME: ${ec}"
  success
  echo
}

rh_status() {
  [ -f ${PID_FILE} ] && print_command
  status -p ${PID_FILE} ${NAME}
}

case "$1" in
  start)
          if [ -f ${PID_FILE} ]; then
            rh_status
            if checkpid $(print_pid); then
              :
            else
              rm ${PID_FILE}
              start
            fi
          else
            start
          fi
          ;;
  stop)
          if [ -f ${PID_FILE} ] && checkpid $(print_pid); then
            stop
          else
            rh_status
            [ -f ${PID_FILE} ] && rm ${PID_FILE}
          fi
          ;;
  restart)
          if [ -f ${PID_FILE} ] && checkpid $(print_pid); then
            restart
          else
            rh_status
            [ -f ${PID_FILE} ] && rm ${PID_FILE}
            start
          fi
          ;;
  status)
          rh_status
          ;;
  *)
          echo "Usage: unicorn {start|stop|restart|status}" >&2
          exit 2
          ;;
esac
