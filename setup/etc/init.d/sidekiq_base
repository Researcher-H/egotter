#!/bin/sh

# https://cdyer.co.uk/blog/init-script-for-sidekiq-with-rbenv/
# /etc/init.d/sidekiq

if [ -f /etc/init.d/functions ]; then
  . /etc/init.d/functions
fi

if echo ' \c' | grep 'c' > /dev/null 2>&1; then
  en='-n'
  ec=''
else
  en=''
  ec='\c'
fi

APP_ROOT="/home/ec2-user/egotter/"
USER="ec2-user"
RAILS_ENV="production"
NAME="${1}"
TAG="egotter:${NAME}"
PID_FILE="${APP_ROOT}tmp/pids/${NAME}.pid"
CONFIG_FILE="${APP_ROOT}config/${NAME}.yml"
LOCK_FILE="/var/lock/subsys/${NAME}"

print_pid() {
  cat ${PID_FILE}
}

print_command() {
  ps -o command= -p $(print_pid)
}

is_quiet() {
  if checkpid $(print_pid); then
    print_command | egrep -a "sidekiq [0-9]+\.[0-9]+\.[0-9]+ ${TAG} \[0 of [0-9]+ busy\] stopping" > /dev/null 2>&1
    return $?
  else
    return 0
  fi
}

is_running() {
  [ -f ${PID_FILE} ] && checkpid $(print_pid)
}

start() {
  cd ${APP_ROOT}
  sudo -u ${USER} -H bash -l -c "cd $APP_ROOT && bundle exec sidekiq -e ${RAILS_ENV} -d -g ${TAG} -C ${CONFIG_FILE}"
  if [ $? -ne 0 ]; then
    echo ${en} "Starting $NAME: ${ec}"; failure; echo
    return 1
  fi

  while [ ! -f ${PID_FILE} ]; do sleep 2; done
  until checkpid $(print_pid); do sleep 2; done

  touch ${LOCK_FILE}
  echo ${en} "Starting $NAME: ${ec}"; success; echo
  return 0
}

quiet() {
  cd ${APP_ROOT}
  sudo -u ${USER} -H bash -l -c "cd $APP_ROOT && bundle exec sidekiqctl quiet ${PID_FILE}"
  if [ $? -ne 0 ]; then
    return 1
  fi

  local retries=10
  while [ ${retries} -gt 1 ]; do
    if is_quiet; then
      return 0
    else
      echo "waiting to be quiet: $(print_command)"
      retries=$(($retries - 1))
      sleep 2
    fi
  done

  return 1
}

stop() {
  cd ${APP_ROOT}
  quiet
  if [ $? -ne 0 ]; then
    echo ${en} "Stopping $NAME: ${ec}"; failure; echo
    return 1
  fi

  local pid=$(print_pid)
  sudo -u ${USER} -H bash -l -c "cd $APP_ROOT && bundle exec sidekiqctl stop ${PID_FILE}"

  local retries=10
  while [ ${retries} -gt 1 ]; do
    if checkpid ${pid}; then
      echo "waiting to stop: $(print_command)"
      retries=$(($retries - 1))
      sleep 2
    else
      rm -f ${LOCK_FILE}
      echo ${en} "Stopping $NAME: ${ec}"; success; echo
      return 0
    fi
  done

  echo ${en} "Stopping $NAME: ${ec}"; failure; echo
  return 1
}

force_stop() {
  is_running && kill -USR1 $(print_pid) && sleep 3
  is_running && kill -TERM $(print_pid) && sleep 11
  is_running && kill -9 $(print_pid) && sleep 1

  rm -f ${PID_FILE} ${LOCK_FILE}
  echo ${en} "Stopping $NAME: ${ec}"; success; echo
}

rh_status() {
  [ -f ${PID_FILE} ] && print_command
  status -p ${PID_FILE} ${NAME}
}

case "${2}" in
  start)
          if [ -f ${PID_FILE} ]; then
            rh_status
            checkpid $(print_pid)
            if [ $? -ne 0 ]; then
              rm -f ${PID_FILE}
              start
            fi
          else
            start
          fi
          ;;
  stop)
          if is_running; then
            stop
          else
            rh_status
            [ -f ${PID_FILE} ] && rm -f ${PID_FILE}
          fi
          ;;
  restart)
          if is_running; then
            stop
            [ $? -eq 0 ] && start
          else
            rh_status
            [ -f ${PID_FILE} ] && rm -f ${PID_FILE}
            start
          fi
          ;;
  force-stop)
          force_stop
          ;;
  force-restart)
          force_stop
          start
          ;;
  status)
          rh_status
          ;;
  *)
          echo "Usage: sidekiq {start|stop|restart|status}" >&2
          exit 1
          ;;
esac
exit 0
